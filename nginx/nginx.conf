user nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    use epoll;
    worker_connections  2048;
}

http {
    include  /etc/nginx/mime.types;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/access.log  main;
    sendfile on;
    keepalive_timeout  65;
    client_max_body_size   20m;

    server {
        #开启gzip
        gzip  on;  
        # nginx在设置了gzip on 后就已经打开了gzip压缩功能，不过这时候nginx所使用的是动态压缩。在动态压缩的情况下nginx会自动的将文件压缩成.gz文件，这时候就算不配置项目打包gzip也能达到一样的效果。但是动态压缩无疑会占用服务器的资源来进行此操作。

        # nginx也提供了静态压缩模式，也就是gzip_static，在这个模式下nginx会去寻找对应文件的.gz文件，只有.gz文件不存在的时候才会去压缩对应文件，这样就不会过度占用服务器资源。
        # 开启或关闭gzip静态文件处理模块（提前压缩，需要nginx中添加上http_gzip_static_module模块）
        # gzip_static on; 

        # 设置压缩所需要的缓冲区大小，以4k为单位，如果文件为7k则申请2*4k的缓冲区 
        gzip_buffers 4 16k;
        # 设置gzip压缩针对的HTTP协议版本
        gzip_http_version 1.1;

        #  压缩起点，文件大于1k才进行压缩
        gzip_min_length 1k;
        # 压缩级别1-9，越大压缩率越高，同时消耗cpu资源也越多，建议设置在5左右。 
        gzip_comp_level 5; 
        # 需要压缩哪些响应类型的资源，多个空格隔开。不建议压缩图片.
        gzip_types text/plain application/javascript application/x-javascript text/javascript text/xml text/css;  
        # 配置禁用gzip条件，支持正则。此处表示ie6及以下不启用gzip（因为ie低版本不支持）
        gzip_disable "MSIE [1-6]\.";  
        # 是否在http header中添加Vary: Accept-Encoding，建议开启
        gzip_vary on;


        listen 80; # 端口号
        server_name localhost; # 在黑窗口下ipconifg后出现的IPv4地址复制
        location / {
            root /app; # 项目打包后的路径
            try_files $uri $uri/ /index.html; # 解决刷新页面变成404问题的代码
            index  index.html index.htm;
            # proxy_pass http://47.96.118.55:10520; # 代理地址
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
